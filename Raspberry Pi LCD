Raspberry Pi LCD

Keyestudio KS1602 = 16x02 characters
Has a PCF8574 I2C port expander

----------------------------------------------------------------------
Pi Start Menu > Preferences > Raspberry Pi Configuration.  Interfaces tab.  Enable I2C.

Utilities
There is a set of command-line utility programs that can help get an I2C interface working. You can get them with the apt package manager.

sudo apt-get install -y i2c-tools

i2cdetect program will probe all the addresses on a bus, and report whether any devices are present.
	i2cdetect -y 1
Read and write registers using the i2cget, i2cset and i2cdump commands.


----------------------------------------------------------------------
You need to enable i2c support on the Raspberry Pi and install the python-smbus package.
	#!/usr/bin/env python
	import smbus
	import time
	# i2c address of PCF8574
	PCF8574=0x20
	# open the bus (0 -- original Pi, 1 -- Rev 2 Pi)
	b=smbus.SMBus(0)

if (pins & 0x01) == 0:
    print "Hallo 0"

In case anyone here needs to install python-smbus the code in Lx-Terminal is:
	sudo apt-get update
	sudo apt-get install python-smbus

----------------------------------------------------------------------
Enabling i2c (headless):
	sudo raspi-config > interfacing options > i2c
	sudo reboot





------------------------------------------------------------------------
# i2ctest.py
# A brief demonstration of the Raspberry Pi I2C interface, using the Sparkfun
# Pi Wedge breakout board and a SparkFun MCP4725 breakout board:
# https://www.sparkfun.com/products/8736

import smbus

# I2C channel 1 is connected to the GPIO pins
channel = 1  ### NPS, I2C0 is used for HAT ID EEPROM

#  MCP4725 defaults to address 0x60
address = 0x60

# Register addresses (with "normal mode" power-down bits)
reg_write_dac = 0x40

# Initialize I2C (SMBus)
bus = smbus.SMBus(channel)

# Create a sawtooth wave 16 times
for i in range(0x10000):

    # Create our 12-bit number representing relative voltage
    voltage = i & 0xfff

    # Shift everything left by 4 bits and separate bytes
    msg = (voltage & 0xff0) >> 4
    msg = [msg, (msg & 0xf) << 4]

    # Write out I2C command: address, reg_write_dac, msg[0], msg[1]
    bus.write_i2c_block_data(address, reg_write_dac, msg)

-------------------------------------------------------------------------

sudo apt-get install python-pip
sudo pip install RPLCD
sudo reboot

THIS IS A GOOD ONE (albeit not I2C):
https://www.circuitbasics.com/raspberry-pi-lcd-set-up-and-programming-in-python/
(https://www.circuitbasics.com/raspberry-pi-ds18b20-temperature-sensor-tutorial)

	from RPLCD import CharLCD
	lcd = CharLCD(cols=16, rows=2, pin_rs=37, pin_e=35, pins_data=[40, 38, 36, 32, 33, 31, 29, 23])
	lcd.cursor_pos = (1, 3)    # bottom row, fourth column
	lcd.write_string(u'Hello world!')

	lcd.cursor_mode = CursorMode.blink
	#lcd.cursor_mode = CursorMode.line
	#lcd.cursor_mode = CursorMode.hide

	import time
	while True:
	    lcd.write_string("Time: %s" %time.strftime("%H:%M:%S"))
	    lcd.cursor_pos = (1, 0)
	    lcd.write_string("Date: %s" %time.strftime("%m/%d/%Y"))

--------------------------------------------------------------------------
from RPLCD import CharLCD
import socket
import fcntl
import struct

lcd = CharLCD(cols=16, rows=2, pin_rs=37, pin_e=35, pins_data=[33, 31, 29, 23])

def get_ip_address(ifname):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    return socket.inet_ntoa(fcntl.ioctl(
        s.fileno(),
        0x8915, 
        struct.pack('256s', ifname[:15])
    )[20:24])

lcd.write_string("IP Address:") 

lcd.cursor_pos = (1, 0)
lcd.write_string(get_ip_address('wlan0'))
--------------------------------------------------------------------------


--------------------------------------------------------------------------
--------------------------------------------------------------------------
